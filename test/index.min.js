(function(dependencies, global) {
    var cache = [];

    function require(index) {
        var module = cache[index],
            callback, exports;

        if (module === undefined) {
            callback = dependencies[index];
            exports = {};

            cache[index] = module = {
                exports: exports,
                require: require
            };

            callback.call(exports, require, exports, module, global);
        }

        return module.exports;
    }

    require.resolve = function(path) {
        return path;
    };

    if (typeof(define) === "function" && define.amd) {
        define([], function() {
            return require(0);
        });
    } else if (typeof(module) !== "undefined" && module.exports) {
        module.exports = require(0);
    } else {

        require(0);

    }
}([
    function(require, exports, module, global) {

        var XMLHttpRequestPolyfill = require(1);


        var xhr = new XMLHttpRequestPolyfill();


        xhr.addEventListener("load", function(e) {
            console.log(e, xhr);
        });

        xhr.open("GET", "index.html", true);

        xhr.setRequestHeader("Content-Type", "text/html");

        xhr.send();


    },
    function(require, exports, module, global) {

        var extend = require(2),
            emptyFunction = require(8),
            environment = require(9);


        var window = environment.window,

            ActiveXObject = window.ActiveXObject,

            XMLHttpRequestPolyfill = (
                window.XMLHttpRequest ||
                (function getRequestType(types) {
                    var i = -1,
                        il = types.length - 1,
                        instance, type;

                    while (i++ < il) {
                        try {
                            type = types[i];
                            instance = type();
                            break;
                        } catch (e) {}
                    }

                    if (!type) {
                        throw new Error("XMLHttpRequest not supported by this browser");
                    }

                    return function XMLHttpRequest() {
                        return type();
                    };
                }([
                    function createActiveObject() {
                        return new ActiveXObject("Msxml2.XMLHTTP");
                    },
                    function createActiveObject() {
                        return new ActiveXObject("Msxml3.XMLHTTP");
                    },
                    function createActiveObject() {
                        return new ActiveXObject("Microsoft.XMLHTTP");
                    }
                ]))
            );


        XMLHttpRequestPolyfill.prototype.nativeSetRequestHeader = XMLHttpRequestPolyfill.prototype.setRequestHeader || emptyFunction;

        XMLHttpRequestPolyfill.prototype.setRequestHeader = function setRequestHeader(key, value) {
            (this.__requestHeaders__ || (this.__requestHeaders__ = {}))[key] = value;
            return this.nativeSetRequestHeader(key, value);
        };

        XMLHttpRequestPolyfill.prototype.getRequestHeader = function getRequestHeader(key) {
            return (this.__requestHeaders__ || (this.__requestHeaders__ = {}))[key];
        };

        XMLHttpRequestPolyfill.prototype.getRequestHeaders = function getRequestHeaders() {
            return extend({}, this.__requestHeaders__);
        };


        module.exports = XMLHttpRequestPolyfill;


    },
    function(require, exports, module, global) {

        var keys = require(3);


        function baseExtend(a, b) {
            var objectKeys = keys(b),
                i = -1,
                il = objectKeys.length - 1,
                key;

            while (i++ < il) {
                key = objectKeys[i];
                a[key] = b[key];
            }
        }

        module.exports = function extend(out) {
            var i = 0,
                il = arguments.length - 1;

            while (i++ < il) {
                baseExtend(out, arguments[i]);
            }

            return out;
        };


    },
    function(require, exports, module, global) {

        var has = require(4),
            isNative = require(5),
            isObject = require(7);


        var nativeKeys = Object.keys;


        if (!isNative(nativeKeys)) {
            nativeKeys = function keys(obj) {
                var localHas = has,
                    out = [],
                    i = 0,
                    key;

                for (key in obj) {
                    if (localHas(obj, key)) {
                        out[i++] = key;
                    }
                }

                return out;
            };
        }

        module.exports = function keys(obj) {
            return nativeKeys(isObject(obj) ? obj : Object(obj));
        };


    },
    function(require, exports, module, global) {

        var hasOwnProp = Object.prototype.hasOwnProperty;


        module.exports = function has(obj, key) {
            return hasOwnProp.call(obj, key);
        };


    },
    function(require, exports, module, global) {

        var isFunction = require(6);


        var reHostCtor = /^\[object .+?Constructor\]$/,

            functionToString = Function.prototype.toString,

            reNative = RegExp("^" +
                functionToString.call(toString)
                .replace(/[.*+?^${}()|[\]\/\\]/g, "\\$&")
                .replace(/toString|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
            ),

            isHostObject = (function() {
                try {
                    String({
                        "toString": 0
                    } + "");
                } catch (e) {
                    return function isHostObject() {
                        return false;
                    };
                }

                return function isHostObject(value) {
                    return !isFunction(value.toString) && typeof(value + "") === "string";
                };
            }());


        module.exports = function isNative(obj) {
            return obj && (
                isFunction(obj) ?
                reNative.test(functionToString.call(obj)) : (
                    typeof(obj) === "object" && (
                        (isHostObject(obj) ? reNative : reHostCtor).test(obj) || false
                    )
                )
            ) || false;
        };


    },
    function(require, exports, module, global) {

        var objectFunction = "[object Function]",
            toString = Object.prototype.toString,
            isFunction;


        if (typeof(/./) === "function" || (typeof(Uint8Array) !== "undefined" && typeof(Uint8Array) !== "function")) {
            isFunction = function isFunction(obj) {
                return toString.call(obj) === objectFunction;
            };
        } else {
            isFunction = function isFunction(obj) {
                return typeof(obj) === "function" || false;
            };
        }


        module.exports = isFunction;


    },
    function(require, exports, module, global) {

        module.exports = function isObject(obj) {
            var type = typeof(obj);
            return type === "function" || (obj && type === "object") || false;
        };


    },
    function(require, exports, module, global) {

        module.exports = emptyFunction;


        function emptyFunction() {}

        function makeEmptyFunction(value) {
            return function() {
                return value;
            };
        }

        emptyFunction.thatReturns = makeEmptyFunction;
        emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
        emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
        emptyFunction.thatReturnsNull = makeEmptyFunction(null);
        emptyFunction.thatReturnsThis = function() {
            return this;
        };
        emptyFunction.thatReturnsArgument = function(argument) {
            return argument;
        };


    },
    function(require, exports, module, global) {

        var environment = module.exports,

            hasWindow = typeof(window) !== "undefined",
            userAgent = hasWindow ? window.navigator.userAgent : "";


        environment.browser = !!(
            hasWindow &&
            typeof(navigator) !== "undefined" &&
            window.document
        );

        environment.node = !environment.browser;

        environment.mobile = environment.browser && /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(userAgent.toLowerCase());

        environment.window = (
            hasWindow ? window :
            typeof(global) !== "undefined" ? global :
            typeof(self) !== "undefined" ? self : {}
        );

        environment.pixelRatio = environment.window.devicePixelRatio || 1;

        environment.document = typeof(document) !== "undefined" ? document : {};

        environment.isInWorker = typeof(importScripts) !== "undefined";


    }
], (new Function("return this;"))()));
